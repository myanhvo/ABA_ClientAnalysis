knitr::opts_chunk$set(echo = TRUE)
library(broom)
library(lubridate)
library(ggplot2)
library(dplyr)
library(readxl)
library(caret)
library(groupdata2)
library(rpart)
library(rpart.plot)
library(Metrics)
library(mlr)
#aba_data <- read.csv("/Users/anh.vo/Downloads/School/ABA Client Analysis/data/datasetABA.csv")
aba_data <- aba_data %>%
mutate_all(~ if_else(. %in% c("", " ", "NULL", "Not Available"), NA, .))
knitr::opts_chunk$set(echo = TRUE)
library(broom)
library(lubridate)
library(ggplot2)
library(dplyr)
library(readxl)
library(caret)
library(groupdata2)
library(rpart)
library(rpart.plot)
library(Metrics)
library(mlr)
aba_data <- read.csv("/Users/anh.vo/Downloads/School/ABA Client Analysis/data/datasetABA.csv")
aba_data <- aba_data %>%
mutate_all(~ if_else(. %in% c("", " ", "NULL", "Not Available"), NA, .))
aba <- aba_data %>%
select(-X, -AskedByClientUno, -CategoryUno, -SubcategoryUno, -TakenByAttorneyUno, -ClosedByAttorneyUno, -LegalDeadline, -Conversation, -PostalCode, -ClosedOnUtc, -Subcategory, -County, -Imprisoned, -BaseIncomeLimit, -PerHouseholdMemberIncomeLimit)
df <- data.frame(colSums(is.na(aba)))
df <- df %>%
mutate(`Missing Percentage`= round(colSums.is.na.aba..*100/nrow(aba), 6)) %>%
arrange(desc(`Missing Percentage`)) %>%
mutate(`Missing Percentage` = paste(`Missing Percentage`, "%")) %>%
select(-colSums.is.na.aba..)
aba <- aba %>%
select(-InvestmentsBalance, -SavingsBalance, -CheckingBalance)
aba <- aba %>%
mutate(Gender = case_when(Gender == "Female" ~ "Female",
Gender == "Male" ~ "Male",
TRUE ~ "Other")) %>%
mutate(Age = as.numeric(Age))
aba <- aba %>%
mutate(Age = case_when(Age < 30 & Age >= 0 ~ "[< 29]",
Age < 40 & Age >= 30 ~ "[30-39]",
Age < 50 & Age >= 40 ~ "[40-49]",
Age < 60 & Age >= 50 ~ "[50-59]",
Age < 110 & Age >= 60 ~ "[60+]",
TRUE ~ "Other"))
aba <- na.omit(aba)
library(stringr)
aba <- aba %>%
mutate(Race = case_when(str_detect(EthnicIdentity, "^Africa") ~ "African",
str_detect(EthnicIdentity, "^(Asian|Arab|East)") ~ "Asian",
str_detect(EthnicIdentity, "^Not") ~ "Not Hispanics or Latinx",
str_detect(EthnicIdentity, "^(Hispanic|Latino)") ~ "Hispanics or Latinx",
str_detect(EthnicIdentity, "^Caucasian") ~ "Caucasian",
TRUE ~ "Other (Native, Slavic, Unidentified)"
)) %>%
select(-EthnicIdentity)
aba <- aba %>%
mutate(MaritalStatus = case_when(str_detect(MaritalStatus, "^(Divorced|Widowed)") ~ "Divorced or Widowed",
str_detect(MaritalStatus, "^Married") ~ "Married or Remarried",
str_detect(MaritalStatus, "^Single") ~ "Single",
str_detect(MaritalStatus, "^Separated") ~ "Separated",
TRUE ~ "Other"
))
aba <- aba %>%
mutate(NumberInHousehold = as.numeric(NumberInHousehold)) %>%
mutate(NumberInHousehold = case_when(NumberInHousehold == 1 ~ "1",
NumberInHousehold == 2 ~ "2",
NumberInHousehold == 3 ~ "3",
NumberInHousehold == 4 ~ "4",
TRUE ~ "5+"))
aba <- aba %>%
mutate(AnnualIncome = as.numeric(AnnualIncome),
AllowedIncome = as.numeric(AllowedIncome),
AllowedAssets = as.character(AllowedAssets),
IncomeMultiplier = as.character(IncomeMultiplier))
cor(aba[, c(8,9)])
aba <- aba %>%
mutate(Category = case_when(Category == "Family and Children" ~ "Family and Children",
Category %in% c("Juvenile", "Education", "Individual Rights",
"Consumer Financial Questions",
"Income Maintenance", "Heath and Disability",
"Work, Employment and Unemployment") ~ "Social Welfare and Economic Empowerment",
TRUE ~ "Shelter and Other Residential Concerns"))
set.seed(05202023)
data <- aba %>% sample_frac(1)
trainIndex <- sample(nrow(data), 0.8*nrow(data))
train <- data[trainIndex, ]
test <- data[-trainIndex, ]
low <- min(table(train$Category))
size <- round(min(max(table(train$Category)), low/2 + low),0)
train <- balance(
data = train,
size = size,
cat_col = "Category",
mark_new_rows = TRUE
)
train <- train[, -c(13)]
set.seed(05202023)
data <- aba %>% sample_frac(0.001)
trainIndex <- sample(nrow(data), 0.8*nrow(data))
train <- data[trainIndex, ]
test <- data[-trainIndex, ]
low <- min(table(train$Category))
size <- round(min(max(table(train$Category)), low/2 + low),0)
train <- balance(
data = train,
size = size,
cat_col = "Category",
mark_new_rows = TRUE
)
train <- train[, -c(13)]
svmP <- train(Category ~ .,
data=train,
method="svmPoly",
trControl=trainControl("repeatedcv", number=10, repeats=10),
tuneGrid=expand.grid(C=c(1,10,100),
degree=2:4,
scale=1))
set.seed(05202023)
data <- aba %>% sample_frac(0.001)
trainIndex <- sample(nrow(data), 0.8*nrow(data))
train <- data[trainIndex, ]
test <- data[-trainIndex, ]
low <- min(table(train$Category))
size <- round(min(max(table(train$Category)), low/2 + low),0)
train <- balance(
data = train,
size = size,
cat_col = "Category",
mark_new_rows = TRUE
)
train <- train[, -c(13)]
svmP <- caret::train(Category ~ .,
data=train,
method="svmPoly",
trControl=trainControl("repeatedcv", number=10, repeats=10),
tuneGrid=expand.grid(C=c(1,10,100),
degree=2:4,
scale=1))
